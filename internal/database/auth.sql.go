// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getUserIdFromRefreshToken = `-- name: GetUserIdFromRefreshToken :one
SELECT user_id, revoked_at 
FROM refresh_tokens
WHERE token = $1
`

type GetUserIdFromRefreshTokenRow struct {
	UserID    uuid.UUID
	RevokedAt sql.NullTime
}

func (q *Queries) GetUserIdFromRefreshToken(ctx context.Context, token string) (GetUserIdFromRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserIdFromRefreshToken, token)
	var i GetUserIdFromRefreshTokenRow
	err := row.Scan(&i.UserID, &i.RevokedAt)
	return i, err
}

const revokeToken = `-- name: RevokeToken :execresult
UPDATE refresh_tokens 
SET revoked_at = NOW(),
    updated_at = NOW()
WHERE token = $1
`

func (q *Queries) RevokeToken(ctx context.Context, token string) (sql.Result, error) {
	return q.db.ExecContext(ctx, revokeToken, token)
}

const saveRefreshToken = `-- name: SaveRefreshToken :execresult
INSERT INTO refresh_tokens(token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES ($1, NOW(), NOW(), $2, $3, NULL)
`

type SaveRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) SaveRefreshToken(ctx context.Context, arg SaveRefreshTokenParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, saveRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
}
